import { describe, it } from "node:test";
import assert from "node:assert/strict";

import { createRequire } from "module";
const require = createRequire(import.meta.url);
const GorillaCodec = require("../lib/binding.js");

describe("Errors", () => {
  it("No values", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

    try {
      const encodeResult = await GorillaCodec.encode({ timestamps });
      assert.deepStrictEqual(true, false);
    } catch (e) {
      assert.deepStrictEqual(true, true);
    }
  });

  it("No timestamps", async () => {
    const values = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1];

    try {
      const encodeResult = await GorillaCodec.encode({ values });
      assert.deepStrictEqual(true, false);
    } catch (e) {
      assert.deepStrictEqual(true, true);
    }
  });

  it("Wrong timestamps types", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const values = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1];

    try {
      const encodeResult = await GorillaCodec.encode({
        timestamps: timestamps.map((x) => x.toString()),
        values,
      });
      assert.deepStrictEqual(true, false);
    } catch (e) {
      assert.deepStrictEqual(true, true);
    }
  });

  it("Wrong values types", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const values = [1.1, 2.2, 3.3, 4.4, "5.5", 6.6, 7.7, 8.8, 9.9, 10.1];

    try {
      const encodeResult = await GorillaCodec.encode({ timestamps, values });
      assert.deepStrictEqual(true, false);
    } catch (e) {
      assert.deepStrictEqual(true, true);
    }
  });

  it("Different lengths", async () => {
    const timestamps = [1, 2, 3, 4, 5];
    const values = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6];

    try {
      const encodeResult = await GorillaCodec.encode({ timestamps, values });
      assert.deepStrictEqual(true, false);
    } catch (e) {
      assert.deepStrictEqual(true, true);
    }
  });
});

describe("Empty", () => {
  it("Encodes an empty array", async () => {
    const timestamps = [];
    const values = [];

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    console.log("encodeResult", encodeResult);
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });
});

describe("Integer", () => {
  it("Encodes an integer array", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const values = [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.1];

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });

  it("Encodes a large integer array", async () => {
    const timestamps = [];
    const values = [];

    for (let i = 0; i < 1000000; i++) {
      timestamps.push(i);
      values.push(i);
    }

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });

  it("Encodes a large integer array with a large gap", async () => {
    const timestamps = [];
    const values = [];

    for (let i = 0; i < 1000000; i++) {
      timestamps.push(i * 3333);
      values.push(i * 1.2333);
    }

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });
});

describe("String", () => {
  it("Encodes a string array", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const values = [
      "one",
      "two",
      "three",
      "four",
      "five",
      "six",
      "seven",
      "eight",
      "nine",
      "ten",
    ];

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });

  it("Encodes a large string array", async () => {
    const timestamps = [];
    const values = [];

    for (let i = 0; i < 1000000; i++) {
      timestamps.push(i);
      values.push(i.toString());
    }

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });
});

describe("Boolean", () => {
  it("Encodes a boolean array", async () => {
    const timestamps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    const values = [
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
      true,
      false,
    ];

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });

  it("Encodes a large boolean array", async () => {
    const timestamps = [];
    const values = [];

    for (let i = 0; i < 1000000; i++) {
      timestamps.push(i);
      values.push(i % 5 === 0);
    }

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });
});
describe("Float", () => {
  it("Encodes a float array", async () => {
    const timestamps = [
      1704747969000, 1704748039000, 1704748110000, 1704748181000, 1704748252000,
      1704748323000, 1704748394000, 1704748465000, 1704748536000, 1704748606000,
      1704748677000, 1704748748000, 1704748819000, 1704748890000, 1704748961000,
      1704749032000, 1704749102000, 1704749173000, 1704749244000, 1704749315000,
      1704749386000, 1704749457000, 1704749528000, 1704749599000, 1704749670000,
      1704749740000, 1704749811000, 1704749882000, 1704749953000, 1704750024000,
      1704750095000, 1704750166000, 1704750236000, 1704750307000, 1704750378000,
      1704750449000, 1704750520000, 1704750591000, 1704750662000, 1704750733000,
      1704750803000, 1704750874000, 1704750945000, 1704751016000, 1704751087000,
      1704751158000, 1704751229000, 1704751300000, 1704751370000, 1704751441000,
      1704751512000, 1704751583000, 1704751654000, 1704751725000, 1704751796000,
      1704751867000, 1704751937000, 1704752008000, 1704752079000, 1704752150000,
      1704752221000, 1704752292000, 1704752363000, 1704752434000, 1704752504000,
      1704752575000, 1704752646000, 1704752717000, 1704752788000, 1704752859000,
      1704752930000, 1704753000000, 1704753071000, 1704753142000, 1704753213000,
      1704753284000, 1704753355000, 1704753426000, 1704753497000, 1704753567000,
      1704753638000, 1704753709000, 1704753780000, 1704753851000, 1704753922000,
      1704753993000, 1704754064000, 1704754134000, 1704754205000, 1704754276000,
      1704754347000, 1704754418000, 1704754489000, 1704754560000, 1704754630000,
      1704754701000, 1704754772000, 1704754843000, 1704754914000, 1704754985000,
      1704755056000, 1704755127000, 1704755197000, 1704755268000, 1704755339000,
      1704755410000, 1704755481000, 1704755552000, 1704755623000, 1704755694000,
      1704755764000, 1704755835000, 1704755906000, 1704755977000, 1704756048000,
      1704756119000, 1704756190000, 1704756260000, 1704756331000, 1704756402000,
      1704756473000, 1704756544000, 1704756615000, 1704756686000, 1704756757000,
      1704756827000, 1704756898000, 1704756969000, 1704757040000, 1704757111000,
      1704757182000, 1704757253000, 1704757324000, 1704757394000, 1704757465000,
      1704757536000, 1704757607000, 1704757678000, 1704757749000, 1704757820000,
      1704757891000, 1704757961000, 1704758032000, 1704758071000, 1704758103000,
      1704758174000, 1704758193000, 1704758245000, 1704758316000, 1704758387000,
      1704758438000, 1704758458000, 1704758528000, 1704758560000, 1704758599000,
      1704758670000, 1704758683000, 1704758741000, 1704758805000, 1704758812000,
      1704758883000, 1704758927000, 1704758954000, 1704759024000, 1704759050000,
      1704759095000, 1704759166000, 1704759172000, 1704759237000, 1704759295000,
      1704759308000, 1704759379000, 1704759417000, 1704759450000, 1704759521000,
      1704759540000, 1704759592000, 1704759662000, 1704759663000, 1704759733000,
      1704759784000, 1704759804000, 1704759875000, 1704759907000, 1704759946000,
      1704760017000, 1704760029000, 1704760088000, 1704760151000, 1704760159000,
      1704760229000, 1704760274000, 1704760300000, 1704760371000, 1704760396000,
      1704760442000, 1704760513000, 1704760519000, 1704760584000, 1704760641000,
      1704760655000, 1704760726000, 1704760763000, 1704760796000, 1704760867000,
      1704760886000, 1704760938000, 1704761008000, 1704761009000, 1704761080000,
      1704761131000, 1704761151000, 1704761222000, 1704761253000, 1704761293000,
      1704761363000, 1704761375000, 1704761434000, 1704761498000, 1704761505000,
      1704761576000, 1704761620000, 1704761647000, 1704761718000, 1704761742000,
      1704761789000, 1704761860000, 1704761930000, 1704762001000, 1704762072000,
      1704762143000, 1704762214000, 1704762285000, 1704762356000, 1704762426000,
      1704762497000, 1704762568000, 1704762639000, 1704762710000, 1704762781000,
      1704762852000, 1704762923000, 1704762993000, 1704763064000, 1704763135000,
      1704763206000, 1704763277000, 1704763348000, 1704763419000, 1704763490000,
      1704763560000, 1704763631000, 1704763702000, 1704763773000, 1704763844000,
      1704763915000, 1704763986000, 1704764057000, 1704764127000, 1704764198000,
      1704764269000, 1704764340000, 1704764411000, 1704764482000, 1704764553000,
      1704764623000, 1704764694000, 1704764964000, 1704765035000, 1704765106000,
      1704765177000, 1704765248000, 1704765318000, 1704765389000, 1704765460000,
      1704765531000, 1704765602000, 1704765673000, 1704765744000, 1704765814000,
      1704765885000, 1704765956000, 1704766027000, 1704766098000, 1704766169000,
      1704766240000, 1704766310000, 1704766381000, 1704766452000, 1704766523000,
      1704766675000, 1704766746000, 1704766817000, 1704766888000, 1704766959000,
      1704767030000, 1704767100000, 1704767171000, 1704767242000, 1704767313000,
      1704767384000, 1704767455000, 1704767526000, 1704767597000, 1704767668000,
      1704767739000, 1704767810000, 1704767880000, 1704767951000, 1704768022000,
      1704768093000, 1704768164000, 1704768235000, 1704768306000, 1704768377000,
      1704768448000, 1704768519000, 1704768590000, 1704768661000, 1704768731000,
      1704768802000, 1704768873000, 1704768944000, 1704769015000, 1704769086000,
      1704769157000, 1704769228000, 1704769350000, 1704769421000, 1704769492000,
    ];
    const values = [
      423.26, 99.63, 304.22, 669.93, 488.2, 284.47, 364.16, 514.28, 441.27,
      666.72, 410.55, 184.21, 476.86, 433.87, 388.12, 515.06, 478.07, 681.59,
      179.58, 401.31, 388.16, 445.94, 451.17, 298.24, 421.8, 469.47, 432.95,
      290.23, 685.61, 123.91, 633.25, 283.24, 423.36, 592.5, 399.61, 378.26,
      199.58, 612.17, 243.98, 655.88, 210.05, 352.73, 467.34, 374.65, 437.42,
      462.99, 341.85, 601.25, 270.35, 565.57, 546.41, 317.15, 522.64, 472.7,
      516.15, 164.07, 673.62, 244.45, 446.13, 217.22, 691.55, 304.47, 324.29,
      524.49, 479.22, 685.45, 500.68, 465.16, 670.98, 125.58, 336.11, 436.62,
      470.47, 312.67, 516.62, 466.07, 263.24, 289.1, 483.42, 348.49, 385.08,
      644.79, 499.55, 234.17, 312.81, 595.04, 352.87, 300.76, 400.68, 410.45,
      263.22, 313.24, 268.84, 355.21, 226.15, 105.16, 381.74, 342.34, 643.34,
      394.08, 584.69, 323.77, 284.59, 356.6, 491.27, 316.07, 428.07, 297.52,
      405.78, 262.63, 85.47, 446.19, 350.74, 368.92, 623.5, 196.29, 319.98,
      452.97, 539.32, 139.67, 525.96, 468.5, 395.9, 616.43, 71.78, 285.43,
      598.05, 510.63, 123.74, 458.83, 289.84, 421.11, 612.58, 608.28, 635.14,
      671.63, 521.23, 377.03, 296.7, 555.41, 285.68, 448.07, 125.21,
      211.7538299560547, 476.45, 642.64, 165.12454223632812, 302.09, 348.14,
      291.81, 115.31229400634766, 298.53, 452.23, 30.0363597869873, 492.93,
      199.84, 28.6519947052002, 308.84, 3.9270403385162354, 454.61, 361.6,
      -18.72783660888672, 430.9, 489.04, -39.079654693603516, 316.66, 344.88,
      -125.80463409423828, 293.24, -100.73027801513672, 281.75, 349.74,
      -78.411865234375, 563.05, 532.54, -123.74734497070312, 434.08,
      -120.31877136230469, 566.76, 300.84, -138.3287353515625, 309.8, 106.36,
      -167.0904998779297, 399.37, 331.66, -166.59881591796875, 258.49,
      -206.30628967285156, 360.41, 416.46, -193.38092041015625, 513.32, 101.28,
      -240.6313934326172, 278.41, 302.4, -247.88967895507812, 362.93,
      -306.3316955566406, 209.11, 228.02, -309.59210205078125, 344.78, 331.4,
      -326.282470703125, 292.44, -366.2227783203125, 164.21, 118.63,
      -339.59588623046875, 405.12, 296.75, -375.6676940917969, 258.92, 95.99,
      -392.2933654785156, 324.84, -392.55206298828125, 337.44, 250.62,
      -412.6581115722656, 300.56, 366.66, -409.2553405761719, 183.62, 414,
      341.23, 352.01, 176.6, 279.68, 266.42, 355.19, 331.54, 88.3, 348.26,
      291.5, 324.47, 363.26, 451.54, 396.35, 336.56, 523.32, 404, 89.32, 339.18,
      346.27, 261.23, 414.3, 460.47, 240.93, 338.45, 81.73, 306.48, 280.72,
      354.74, 183.1, 302.26, 390.08, 489.2, 340.13, 367.54, 339.2, 376.89,
      230.88, 377.62, 187.64, 372.03, 294.25, 400.51, 288.53, 288.06, 272.05,
      272.32, 234.07, 344.7, 332.46, 322.22, 158.02, 287.71, 449.22, 244.25,
      296.68, 253, 278.57, 342.52, 323.86, 335.33, 335.56, 158.75, 321.09,
      292.65, 521.04, 480.35, 348.34, 312.5, 186.01, 286.09, 141.73, 283.79,
      225.04, 349.84, 256.48, 137.48, 452.64, 297.11, 328.63, 333.4, 401.48,
      225.04, 382.77, 313.49, 85.66, 329.31, 110.69, 227.33, 424.61, 299.82,
      397.34, 336.54, 360.08, 279.08, 430.12, 467.05, 298.94, 210.36, 389.55,
      395.9, 246.17, 338.1,
    ];

    const encodeResult = await GorillaCodec.encode({
      timestamps: timestamps,
      values: values,
    });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult.timestamps, timestamps);
    assert.deepStrictEqual(decodeResult.values, values);
  });

  it("Encodes a large float array", async () => {
    const timestamps = [];
    const values = [];

    for (let i = 0; i < 1000000; i++) {
      timestamps.push(i);
      values.push(i * 1.2333 * (Math.random() > 0.5 ? 1 : -1));
    }

    const encodeResult = await GorillaCodec.encode({ timestamps, values });
    const decodeResult = await GorillaCodec.decode(encodeResult);

    assert.deepStrictEqual(decodeResult, { timestamps, values });
  });
});
